# Remove old rubyfrom server | √
# Install dependencies | √
# Install rbenv/ruby | √
# Install ruby gems | √
# Install ruby bundler | √
# Build turnt dependincies via bundler | √
# Install ngnix server | √
# Load ngnix config for thin sockets | √
# Init thin proccess  | √
# Restart ngnix | √

# Y Da Faq do i have to run provision twice for bundler to work properly

- hosts: localhost
  connection: local
  vars:
    - rbenv_root: /usr/local/rbenv
    - ruby_version: 2.0.0-p353
  
  tasks:
    - name: purge old ruby version
      apt:  pkg=ruby state=absent purge=yes

    - name: rbenv | install build dependencies
      apt: pkg={{ item }} state=latest install_recommends=no
      with_items:
        - nodejs
        - build-essential
        - git
        - libcurl4-openssl-dev
        - libmysqlclient-dev
        - libreadline-dev
        - libssl-dev
        - libxml2-dev
        - libxslt1-dev
        - zlib1g-dev
        #postgresql
        - libpq-dev
        - postgresql
        - python-psycopg2

    - name: rbenv | update rbenv repo 
      git: repo=git://github.com/sstephenson/rbenv.git dest={{ rbenv_root }} version=v0.4.0

    - name: rbenv | add rbenv to path
      file: path=/usr/local/bin/rbenv src={{ rbenv_root }}/bin/rbenv state=link

    - name: rbenv | add rbenv initialization to profile
      template: src=templates/rbenv.sh.j2 dest=/etc/profile.d/rbenv.sh owner=root group=root mode=0755

    - name: rbenv | check ruby-build installed
      command: test -x /usr/local/bin/ruby-build
      register: rbuild_present
      ignore_errors: yes

    - name: rbenv | create temporary directory
      command: mktemp -d
      register: tempdir
      when: rbuild_present|failed

    - name: rbenv | clone ruby-build repo
      git: repo=git://github.com/sstephenson/ruby-build.git dest={{ tempdir.stdout }}/ruby-build
      when: rbuild_present|failed

    - name: rbenv | install ruby-build 
      command: ./install.sh chdir={{ tempdir.stdout }}/ruby-build
      when: rbuild_present|failed

    - name: rbenv | remove temporary directory
      file: path={{ tempdir.stdout }} state=absent
      when: rbuild_present|failed

    - name: rbenv | check ruby {{ ruby_version }} installed
      shell: RBENV_ROOT={{ rbenv_root }} rbenv versions | grep {{ ruby_version }}
      register: ruby_installed
      ignore_errors: yes

    - name: rbenv | install ruby {{ ruby_version }}
      shell: RBENV_ROOT={{ rbenv_root }} rbenv install {{ ruby_version }}
      when: ruby_installed|failed

    - name: rbenv | set global ruby {{ ruby_version }}
      shell: RBENV_ROOT={{ rbenv_root }} rbenv global {{ ruby_version }}
      when: ruby_installed|failed

    - name: rbenv | set gemrc
      copy: src=files/gemrc dest=/root/.gemrc owner=root group=root mode=0644

    - name: rubygems | install bundler
      command: gem install bundler

    - name: nginx | install server
      apt: pkg=nginx state=installed
    
    - name: nginx | copy config file and restart nginx
      template: src=files/nginx.conf dest=/etc/nginx/nginx.conf
      notify:
      - restart nginx

    - name: rubygems | install thin server
      command: gem install thin

    - name: rubygems | install sinatra framework
      command: gem install sinatra

    - name: rbenv | rehash
      shell: RBENV_ROOT={{ rbenv_root }} rbenv rehash

    - name: postgresql | create database
      sudo: yes
      sudo_user: postgres
      postgresql_db: name=turnt
      
    - name: postgresql | create user
      sudo: yes
      sudo_user: postgres
      postgresql_user: db=turnt name=turnt password=turnt priv=ALL

    - name: postgresql | set user premissions
      sudo: yes
      sudo_user: postgres
      postgresql_user: name=turnt role_attr_flags=NOSUPERUSER,NOCREATEDB 

    - name: bundler | build app dependencies
      command: /usr/local/rbenv/versions/2.0.0-p353/bin/bundle install chdir=/var/www/app/
      sudo: yes
      sudo_user: vagrant

    - name: rubygems | remove conflicting tilt lib
      gem: name=tilt version=2.0.1 state=absent

    - name: rbenv | rehash
      shell: RBENV_ROOT={{ rbenv_root }} rbenv rehash

    
    - file: path=/home/vagrant/thin/log state=directory owner=vagrant group=vagrant mode=0777
    - file: path=/home/vagrant/thin/pid state=directory owner=vagrant group=vagrant mode=0777
    - file: path=/home/vagrant/thin/sockets/ state=directory owner=vagrant group=vagrant mode=0777
    - name: thin | run server and demonize
      command: /usr/local/rbenv/versions/2.0.0-p353/bin/thin -C /var/www/app/thin/config.yaml -d start
      notify:
      - restart nginx

  handlers:
      - name: restart nginx
        service: name=nginx state=restarted